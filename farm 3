task.spawn(function()
    task.wait(35)
    getgenv().API_KEY = "JRxd3MCtzUKSfowmCNAfuTS4a"
    getgenv().GroupName = "Main"
    loadstring(game:HttpGet("http://ii.sebas.sbs:4241/adoptme/dashboard.lua"))()
end)

task.spawn(function()
    getgenv().ATConfig = {
    Mode = "goal", -- "Goal" = 
    FusionEnabled = true, 

    PotionRequirements = {
        ["Common"] = 2,
        ["Uncommon"] = 3,
        ["Rare"] = 4,
        ["Ultra Rare"] = 6,
        ["Legendary"] = 10
    },

    PetsToAge = {
        {name = "Water Opossum", rarity = "Rare", megaGoal = 1, neonGoal = 0, normalGoal = 0}, 
        {name = "Tegu", rarity = "Common", megaGoal = 3, neonGoal = 0, normalGoal = 0}, 
    }
}


if not ATConfig then
    game.Players.LocalPlayer:Kick("Config is Missing!")
    task.wait(120)
    game:Shutdown()
end

print("Made by gxba")
repeat task.wait(1) until game:IsLoaded() and game:GetService("ReplicatedStorage"):FindFirstChild("ClientModules") and game:GetService("ReplicatedStorage").ClientModules:FindFirstChild("Core") and game:GetService("ReplicatedStorage").ClientModules.Core:FindFirstChild("UIManager") and game:GetService("ReplicatedStorage").ClientModules.Core:FindFirstChild("UIManager").Apps:FindFirstChild("TransitionsApp") and game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("TransitionsApp") and game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("TransitionsApp"):FindFirstChild("Whiteout")
repeat task.wait(1) until game.Players and game.Players.LocalPlayer and game:GetService("Players").LocalPlayer.PlayerGui and game:GetService("Players").LocalPlayer.PlayerGui.AssetLoadUI and (game:GetService("Players").LocalPlayer.PlayerGui.AssetLoadUI.Enabled == false)
task.wait(1)

print("[1] Check Done")

local RS = game:GetService("ReplicatedStorage")
local ReplicatedStorage = RS
local ClientData = require(RS.ClientModules.Core.ClientData)
local RouterClient = require(RS.ClientModules.Core:WaitForChild("RouterClient"):WaitForChild("RouterClient"))
local Main_Menu = require(RS.ClientModules.Core.UIManager.Apps.MainMenuApp)
local Player = game:GetService("Players").LocalPlayer
local VirtualInputManager = game:GetService("VirtualInputManager")
local HttpService = game:GetService("HttpService")

local PetPotionEffectsDB = require(game:GetService("ReplicatedStorage").ClientDB.PetPotionEffectsDB)
local current_potion_type = nil

-- ANTI AFK
game.Players.LocalPlayer.Idled:Connect(function() 
    game:GetService("VirtualUser"):Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame) 
    task.wait(1)
    game:GetService("VirtualUser"):Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame) 
end)

-- DISABLE USELESS GUI
Player.PlayerGui.DialogApp.Enabled = false

-- REMOTE BYPASS
for i, v in pairs(debug.getupvalue(RouterClient.init, 7)) do
    v.Name = i
end

-- MISC FUNCTIONS
local function getFullgrownPets(mega)
    local fullgrownTable = {}

    if mega then
        for _, v in ClientData.get_data()[Player.Name].inventory.pets do
            if v.properties.age == 6 and v.properties.neon then
                if not fullgrownTable[v.id] then
                    fullgrownTable[v.id] = {["count"] = 0, ["unique"] = {}}
                end

                fullgrownTable[v.id]["count"] += 1
                table.insert(fullgrownTable[v.id]["unique"], v.unique)

                if fullgrownTable[v.id]["count"] >= 4 then
                    break
                end
            end
        end

    else
        for _, v in ClientData.get_data()[Player.Name].inventory.pets do
            if v.properties.age == 6 and not v.properties.neon and not v.properties.mega_neon then
                if not fullgrownTable[v.id] then
                    fullgrownTable[v.id] = {["count"] = 0, ["unique"] = {}}
                end

                fullgrownTable[v.id]["count"] += 1
                table.insert(fullgrownTable[v.id]["unique"], v.unique)
                
                if fullgrownTable[v.id]["count"] >= 4 then
                    break
                end
            end
        end
    end

    return fullgrownTable
end

function MakeMega(bool)
    repeat
        local fusionReady = {}

        local fullgrownTable = getFullgrownPets(bool)

        for _, valueTable in fullgrownTable do
            if valueTable.count >= 4 then
                table.insert(fusionReady, valueTable.unique[1])
                table.insert(fusionReady, valueTable.unique[2])
                table.insert(fusionReady, valueTable.unique[3])
                table.insert(fusionReady, valueTable.unique[4])
                break
            end
        end

        if #fusionReady >= 4 then
            ReplicatedStorage.API:FindFirstChild("PetAPI/DoNeonFusion"):InvokeServer({unpack(fusionReady)})
        end

    until #fusionReady <= 3
end

function CheckInvisiblePet(petID)
    for _, entry in pairs(require(game:GetService("ReplicatedStorage").ClientDB.Inventory.InventoryDB).pets) do
        if type(entry) == "table" and string.lower(entry.id) == string.lower(petID) then
            return entry.temporary
        end
    end
end

function CheckPetEquip()
    if require(game.ReplicatedStorage.ClientModules.Core.ClientData).get("pet_char_wrappers")[1] then
        return true
    else
        return false
    end
end

function CheckPetEquipID(id)
    if require(game.ReplicatedStorage.ClientModules.Core.ClientData).get("pet_char_wrappers")[1] then
        if id == require(game.ReplicatedStorage.ClientModules.Core.ClientData).get("pet_char_wrappers")[1].pet_unique then
            return true
        else
            return false
        end
    else
        return false
    end
end

function CheckFG(PetID)
    for i,v in pairs(require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game.Players.LocalPlayer.Name].inventory.pets) do
        if i == PetID then        
            if v.properties.age == 6 then
                return true
            else
                return false
            end
        end
    end
end

function findPetName(PetID)
    for _, entry in pairs(require(game:GetService("ReplicatedStorage").ClientDB.Inventory.InventoryDB).pets) do
        if type(entry) == "table" and string.lower(entry.id) == string.lower(PetID) then
            return entry.name
        end
    end
    return nil
end

function isInTable(tableA, item)
    return table.find(tableA, item)
end

function CountPets(petName, petType)
    local c = 0
    for i,v in pairs(ClientData.get_data()[game.Players.LocalPlayer.Name].inventory.pets) do
        local matchType = (petType == "normal" and not v.properties.neon and not v.properties.mega_neon) or (petType == "neon" and v.properties.neon and not v.properties.mega_neon) or (petType == "mega" and v.properties.mega_neon)
        -- local ageType = (fullGrown and v.properties.age == 6) or (fullGrown == nil and v.properties.age < 6)

        if findPetName(v.id) == petName and matchType then
            c += 1
        end
        task.wait()
    end
    return c
end

function GetPotions(potionType)
    local Foods = {}
    for l,o in pairs(require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game.Players.LocalPlayer.Name].inventory.food) do
        if o.id == potionType then
            table.insert(Foods, l)
        end
    end
    return #Foods
end

function GetPlayerData()
    for i,v in pairs(getgc(true)) do
        if typeof(v) == "table" then
            if rawget(v, "pet_id") and rawget(v, "player") == game:GetService("Players").LocalPlayer then
                return v
            end
        end
    end
end

function GetPetData(pet_unique)
    for i, v in pairs(ClientData.get("inventory")["pets"]) do
        if i == pet_unique then
            return v
        end
    end
end

function GetMultiPotCount(pet_unique, potion_type)
    return PetPotionEffectsDB[potion_type].multi_use_count(GetPlayerData(), GetPetData(pet_unique))
end
   
function FGPet(petID, potionType)
    if not CheckFG(petID) then
        print("Equipping pet :", petID)
        game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("ToolAPI/Equip"):InvokeServer(petID)
        repeat task.wait() until ClientData.get_data()[game.Players.LocalPlayer.Name].pet_char_wrappers[1]

        while task.wait() do
            print("[1]")
            if ClientData.get_data()[game.Players.LocalPlayer.Name].pet_char_wrappers[1].pet_progression["age"] < 6 then
                print("[2]")
                potionId = nil
                potionTable = {}
                potionCount = GetMultiPotCount(petID, potionType)
                print("Potion Required :", potionCount)
                for l,o in pairs(ClientData.get_data()[game.Players.LocalPlayer.Name].inventory.food) do
                    if o.id == potionType then
                        if not potionId then
                            potionId = l
                            print("Main Potion", l)
                        else
                            if #potionTable + 1 == potionCount then break end
                            table.insert(potionTable, l)
                            print("Inserted:", l)
                        end
                    end
                end
                print("[3]")

                if not potionId then 
                    if potionType == "tiny_pet_age_potion" then 
                        current_potion_type = "pet_age_potion"
                        return FGPet(petID, "pet_age_potion")
                    else
                        return
                    end
                end
                
                if CheckPetEquipID(petID) then
                    print("[4]")
                    task.wait(1)
                    local success, responseOrError = pcall(function()
                        return RouterClient.get("PetObjectAPI/CreatePetObject"):InvokeServer(
                            "__Enum_PetObjectCreatorType_2",
                            {
                                ["pet_unique"] = petID,
                                ["unique_id"] = potionId,
                                ["additional_consume_uniques"] = potionTable,
                            }
                        )
                    end)
                    print("[5]")
                    if success and (workspace.PetObjects:FindFirstChild("AgePotion") or workspace.PetObjects:FindFirstChild("TinyAgePotion")) then
                        repeat task.wait() 
                            local success, responseOrError = pcall(function()
                                return RouterClient.get("PetAPI/ConsumeFoodObject"):FireServer(workspace.PetObjects:FindFirstChildWhichIsA("Model"), petID)
                            end)
                        until not (workspace.PetObjects:FindFirstChild("AgePotion") or workspace.PetObjects:FindFirstChild("TinyAgePotion"))
                    else
                        continue
                    end

                    print("[6]")
                else
                    break
                end

                print("Applied potions..")
            else
                print("Pet is already full grown!")
                break
            end
        end
        print("Pet Successfully FG : " .. petID)
    else
        print("Pet Not Found or Pet is Full Grown")
    end
end


print("[2] Check Done")

local function enter_the_game()
    local function chooserole()
        local args = {
            [1] = "Parents",
            [2] = {
                ["source_for_logging"] = "intro_sequence",
            },
        }

        game:GetService("ReplicatedStorage")
            :WaitForChild("API")
            :WaitForChild("TeamAPI/ChooseTeam")
            :InvokeServer(unpack(args))
    end
    chooserole()
    task.wait(1)
    local ui_stuff = require(game:GetService("ReplicatedStorage").Fsys).load("UIManager")
    ui_stuff.set_app_visibility("MainMenuApp", false)
    ui_stuff.set_app_visibility("NewsApp", false)
    ui_stuff.set_app_visibility("DialogApp", false)

    task.wait(3)

    game:GetService("ReplicatedStorage")
        :WaitForChild("API")
        :WaitForChild("DailyLoginAPI/ClaimDailyReward")
        :InvokeServer()
    ui_stuff.set_app_visibility("DailyLoginApp", false)
end

enter_the_game()

repeat task.wait() until game:IsLoaded() and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")

print("Final Check Done")

-- Aging Pets

MakeMega(false)
MakeMega(true)

for _, petsData in pairs(ATConfig.PetsToAge) do
    local petName = petsData["name"]
    local megaGoal = petsData["megaGoal"]
    local neonGoal = petsData["neonGoal"]
    local current_potion_type = "pet_age_potion"
    
    while task.wait() do
        print("Start:", petName, megaGoal, neonGoal)
        if megaGoal > 0 then
            local currentMega = CountPets(petName, "mega")
            if currentMega >= megaGoal then
                megaGoal = 0
                continue
            end

            local currentNeon = CountPets(petName, "neon")
            local currentNormal = CountPets(petName, "normal")
            local maxNum = (currentNeon * 4) + currentNormal
            local counter = 0

            if math.floor(maxNum / 16) >= (megaGoal - currentMega) then
                counter = math.floor(maxNum / 16) * 16
            elseif maxNum >= 16 then
                counter = 16
            else
                megaGoal = 0
                continue
            end

            for i, v in pairs(ClientData.get("inventory").pets) do
                if counter <= 0 then break end
                if findPetName(v.id) == petName and (v.properties.neon and not v.properties.mega_neon) then
                    FGPet(i, current_potion_type)
                    counter -= 4
                    if GetPotions(current_potion_type) == 0 then break end
                end
                task.wait()
            end
            for i, v in pairs(ClientData.get("inventory").pets) do
                if counter <= 0 then break end
                if findPetName(v.id) == petName and (not v.properties.neon and not v.properties.mega_neon and not v.properties.neon) then
                    FGPet(i, current_potion_type)
                    counter -= 1
                    if GetPotions(current_potion_type) == 0 then break end
                end
                task.wait()
            end
            MakeMega(false)
            MakeMega(true)
            for i, v in pairs(ClientData.get("inventory").pets) do
                if counter <= 0 then break end
                if findPetName(v.id) == petName and (v.properties.neon and not v.properties.mega_neon) then
                    FGPet(i, current_potion_type)
                    counter -= 4
                    if GetPotions(current_potion_type) == 0 then break end
                end
                task.wait()
            end
            MakeMega(false)
            MakeMega(true)

            local currentMega = CountPets(petName, "mega")
            if currentMega >= megaGoal then 
                megaGoal = 0
                continue
            elseif GetPotions(current_potion_type) >= 1 then
                continue
            else
                break
            end     
        end

        if neonGoal > 0 then
            local currentNeon = CountPets(petName, "neon")
            if currentNeon >= neonGoal then
                neonGoal = 0
                continue
            end
            
            local currentNormal = CountPets(petName, "normal")
            local maxNum = currentNormal
            local counter = 0

            if math.floor(maxNum / 4) >= (neonGoal - currentNeon) then
                counter = math.floor(maxNum / 4) * 4
            elseif maxNum >= 4 then
                counter = 4
            else
                neonGoal = 0
                continue
            end

            for i, v in pairs(ClientData.get("inventory").pets) do
                if findPetName(v.id) == petName and (not v.properties.neon and not v.properties.mega_neon) then
                    FGPet(i, current_potion_type)
                    counter -= 1
                    if GetPotions(current_potion_type) == 0 then break end
                end
                task.wait()
            end
            MakeMega(false)

            if counter == 0 then 
                neonGoal = 0
                continue
            end
            if GetPotions(current_potion_type) == 0 then break end      
        end

        break
    end
end

for _, petsData in pairs(ATConfig.PetsToAge) do
    local petName = petsData["name"]
    local normalGoal = petsData["normalGoal"]
    local current_potion_type = "pet_age_potion"
    
    while task.wait() do
        print("Normal Goal:", petName, normalGoal)
        if normalGoal > 0 then           
            local currentNormal = CountPets(petName, "normal")
            local maxNum = currentNormal
            local counter = 0

            if maxNum >= normalGoal then
                counter = normalGoal
            elseif maxNum > 1 then
                counter = maxNum
            else
                normalGoal = 0
                continue
            end

            for i, v in pairs(ClientData.get("inventory").pets) do
                if findPetName(v.id) == petName and (not v.properties.neon and not v.properties.mega_neon) then
                    FGPet(i, current_potion_type)
                    counter -= 1
                    if GetPotions(current_potion_type) == 0 then break end
                end
                task.wait()
            end

            if counter == 0 then 
                normalGoal = 0
                continue
            end
            if GetPotions(current_potion_type) == 0 then break end      
        end

        break
    end
end

print("Ended")

end)
