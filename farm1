
task.wait(40) -- Initial wait before script starts

-- Anti-AFK setup
local VirtualUser = game:GetService("VirtualUser")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")

local function antiAFK()
    VirtualUser:CaptureController()
    VirtualUser:ClickButton2(Vector2.new())
end

-- ===================== CONFIG =====================
local CONFIG = {
    pet_id = { "aztec_egg_2025_tegu", "aztec_egg_2025_jungle_frog", "some_pet_3", "some_pet_4" },
    age_potions_per_pet = { -- normal pets
        ["aztec_egg_2025_tegu"] = 2,
        ["aztec_egg_2025_jungle_frog"] = 3,
        ["some_pet_3"] = 0,
        ["some_pet_4"] = 0,
    },
    neon_age_potions_per_pet = { -- neon pets
        ["aztec_egg_2025_tegu"] = 2,
        ["aztec_egg_2025_jungle_frog"] = 3,
        ["some_pet_3"] = 0,
        ["some_pet_4"] = 0,
    },
    goal_normal_count = {},  
    goal_neon_count = {},    
    goal_meganeon_count = {  
        ["aztec_egg_2025_tegu"] = 1,
        ["aztec_egg_2025_jungle_frog"] = 1,
        ["some_pet_3"] = 0,
        ["some_pet_4"] = 0,
    },
    neon_maker = true,
    neon_feeder = true,
    webhook_url = "https://discord.com/api/webhooks/1404060448692895824/tsUAjiD8JQlgL93NqgvQUhmU0k7u9pjaRJ9R2KtVulc8TlmLY-jze_jiv7U7u9qv64wj",
}
-- ===================================================

-- Core remotes & modules
local ClientData = require(ReplicatedStorage.ClientModules.Core.ClientData)
local EquipPetRemote = ReplicatedStorage.API["ToolAPI/Equip"]
local FeedPotionRemote = ReplicatedStorage.API["PetObjectAPI/CreatePetObject"]
local NeonFusionRemote = ReplicatedStorage.API["PetAPI/DoNeonFusion"]
local MegaNeonFusionRemote = ReplicatedStorage.API["PetAPI/DoMegaNeonFusion"]

local character = player.Character or player.CharacterAdded:Wait()
local latestPets = {}
local latestPotions = {}

-- Webhook embed function
local function sendWebhookEmbed(title, description, color)
    local embed = {
        title = title,
        description = description,
        color = color or 0x00FF00,
        footer = { text = "Pet Feeder Notification" }
    }

    local data = HttpService:JSONEncode({
        content = "",
        embeds = { embed }
    })

    local req = request or http_request or syn.request or http.request
    if req then
        req({
            Url = CONFIG.webhook_url,
            Method = "POST",
            Headers = { ["Content-Type"] = "application/json" },
            Body = data
        })
    else
        warn("No HTTP request function found for webhooks!")
    end
end

-- Refresh inventory data every 5 seconds
coroutine.wrap(function()
    while true do
        local data = ClientData.getdata and ClientData.getdata() or ClientData.get_data and ClientData.get_data()
        if data and data[player.Name] and data[player.Name].inventory then
            latestPets = data[player.Name].inventory.pets or {}
            latestPotions = {}
            for _, item in pairs(data[player.Name].inventory.food or {}) do
                if item.kind == "pet_age_potion" then
                    table.insert(latestPotions, item)
                end
            end
        else
            latestPets = {}
            latestPotions = {}
        end
        task.wait(5)
    end
end)()

-- Utility functions
local function potionExists(uniqueID)
    for _, pot in pairs(latestPotions) do
        if pot.unique == uniqueID then return true end
    end
    return false
end

local function equipPet(encodedPetId)
    local args = { [1] = encodedPetId, [2] = { ["use_sound_delay"] = true, ["equip_as_last"] = false } }
    local success, err = pcall(function() EquipPetRemote:InvokeServer(unpack(args)) end)
    if success then
        print("Equipped pet:", encodedPetId)
    else
        warn("Failed to equip pet:", encodedPetId, err)
    end
end

local function feedOnePotionAndWait(petUniqueID, potionUniqueID)
    local myCFrame = character:FindFirstChild("HumanoidRootPart") and character.HumanoidRootPart.CFrame or CFrame.new()
    local args = {
        [1] = "__Enum_PetObjectCreatorType_2",
        [2] = { pet_unique = petUniqueID, spawn_cframe = myCFrame, additional_consume_uniques = {}, unique_id = potionUniqueID }
    }

    local success, _ = pcall(function() FeedPotionRemote:InvokeServer(unpack(args)) end)
    if not success then warn("Failed to feed potion:", potionUniqueID) return false end

    for i = 1, 100 do
        task.wait(0.1)
        if not potionExists(potionUniqueID) then
            print("Potion", potionUniqueID, "consumed")
            return true
        end
    end
    warn("Potion", potionUniqueID, "not consumed after 10s")
    return true
end

local function feedPetOneByOne(pet, potionsNeeded)
    local potionsUsed = 0
    if potionsNeeded > #latestPotions then
        potionsNeeded = #latestPotions
    end
    for i = 1, potionsNeeded do
        local potion = latestPotions[i]
        if not potion then break end
        local success = feedOnePotionAndWait(pet.unique, potion.unique)
        if not success then break end
        potionsUsed = potionsUsed + 1
    end
    return potionsUsed
end

local function countPetsByFormAndAge(petID)
    local counts = { normalAge6=0, normalAge0=0, neonAge6=0, neonAge0=0, mega=0 }
    for _, pet in pairs(latestPets) do
        if pet.id == petID then
            local age = pet.properties and pet.properties.age or 0
            local isNeon = pet.properties and pet.properties.neon
            local isMega = pet.properties and pet.properties.mega_neon
            if isMega then counts.mega = counts.mega + 1
            elseif isNeon then
                if age == 6 then counts.neonAge6 = counts.neonAge6 +1 else counts.neonAge0 = counts.neonAge0 +1 end
            else
                if age == 6 then counts.normalAge6 = counts.normalAge6 +1 else counts.normalAge0 = counts.normalAge0 +1 end
            end
        end
    end
    return counts
end

local function getPetName(petID)
    local names = { ["moon_2025_hopbop"]="Hopbop", ["moon_2025_snorgle"]="Snorgle", ["some_pet_3"]="Some Pet 3", ["some_pet_4"]="Some Pet 4" }
    return names[petID] or petID
end

local function generateInventorySummary()
    local lines = {}
    for _, petID in ipairs(CONFIG.pet_id) do
        local c = countPetsByFormAndAge(petID)
        table.insert(lines, string.format("%s: Normal %d | Neon %d | Mega %d/%d", getPetName(petID), c.normalAge6, c.neonAge6, c.mega, CONFIG.goal_meganeon_count[petID] or 0))
    end
    return table.concat(lines, "\n")
end

-- Main feeding logic
local function feedPetsWithLogic()
    local anyAction = false
    local missingPotions = false

    for _, petID in ipairs(CONFIG.pet_id) do
        local counts = countPetsByFormAndAge(petID)
        local normalPotions = CONFIG.age_potions_per_pet[petID] or 0
        local neonPotions = CONFIG.neon_age_potions_per_pet[petID] or 0

        -- Feed neon pets first
        if counts.neonAge0 > 0 and neonPotions > 0 then
            for _, pet in pairs(latestPets) do
                if pet.id==petID and pet.properties.neon and pet.properties.age==0 then
                    equipPet(pet.unique)
                    task.wait(1)
                    feedPetOneByOne(pet, neonPotions)
                    sendWebhookEmbed("🐾 Neon Pet Aged", string.format("Player %s aged neon pet %s (UniqueID: %s)", player.Name, getPetName(petID), pet.unique), 0x00FF00)
                    task.wait(1)
                    anyAction = true
                end
            end
        end
