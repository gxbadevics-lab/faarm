
--// CONFIG
task.spawn(function()
    getgenv().Config = {
        ["inventory"] = "pets", -- pets, stickers, gifts, toys, pet_accessories, transport
        ["username"] = "m4alt_1", -- target username to trade with
        ["pets_to_trade"] = {
            "aztec_egg_2025_winged_snake",                -- trades any dog
            "aztec_egg_2025_temple_friend", -- trades mongoose
            "aztec_egg_2025_golden_lynx",
            "aztec_egg_2025_jungle_frog,mega",
            "aztec_egg_2025_tegu,mega"
        }
    }
end)

--// MAIN SCRIPT
local username = getgenv().Config.username
local inventory = getgenv().Config.inventory
local pets_to_trade = getgenv().Config.pets_to_trade
local trade_status
local pets_unique_ids = {}

repeat task.wait() until game:IsLoaded()
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer
local CoreGui = game:GetService("CoreGui")
local player = Players.LocalPlayer
local playerGui = player:FindFirstChildOfClass("PlayerGui") or CoreGui
local Data = require(ReplicatedStorage.ClientModules.Core.ClientData)

--// Rename hashed remotes
local function dehash()
	local function rename(remotename, hashedremote)
		hashedremote.Name = remotename
	end
	table.foreach(
		getupvalue(require(ReplicatedStorage.ClientModules.Core.RouterClient.RouterClient).init, 7),
		rename
	)
end
dehash()

--// Trade functions
local function first_trade_accept()
    ReplicatedStorage:WaitForChild("API"):WaitForChild("TradeAPI/AcceptNegotiation"):FireServer()
end

local function confirm_trade()
    ReplicatedStorage:WaitForChild("API"):WaitForChild("TradeAPI/ConfirmTrade"):FireServer()
end

local function send_trade(username)
    local args = {
        [1] = Players:WaitForChild(username)
    }
    ReplicatedStorage:WaitForChild("API"):WaitForChild("TradeAPI/SendTradeRequest"):FireServer(unpack(args))
end

local function add_items_in_trade(unique)
    local args = {
        [1] = unique
    }
    ReplicatedStorage:WaitForChild("API"):WaitForChild("TradeAPI/AddItemToOffer"):FireServer(unpack(args))
end

--// MATCH LOGIC
local function matches_pet(v, trade_name)
    local parts = string.split(trade_name, ",") -- e.g. {"dog"} or {"dog","mega"}
    local kind = parts[1]
    local variant = parts[2]

    if v.kind ~= kind then
        return false
    end

    if not variant then
        return true -- no special property required
    end

    if variant == "mega" and not v.properties.mega_neon then
        return false
    elseif variant == "neon" and not v.properties.neon then
        return false
    end

    return true
end

local function check_pets_exists()
    for _, v in pairs(Data.get_data()[LocalPlayer.Name].inventory.pets) do
        for _, trade_name in pairs(pets_to_trade) do
            if matches_pet(v, trade_name) then
                return true
            end
        end
    end
    return false
end

local function get_pet_unique()
    for _, v in pairs(Data.get_data()[LocalPlayer.Name].inventory.pets) do
        for _, trade_name in pairs(pets_to_trade) do
            if matches_pet(v, trade_name) then
                print("Adding pet unique:", v.kind, v.unique)
                table.insert(pets_unique_ids, v.unique)
            end
        end
    end
end

--// Auto trade logic
local function autotrade()
    if #pets_unique_ids > 0 and not LocalPlayer.PlayerGui.TradeApp.Frame.Visible then
        trade_status = false
        send_trade(username)
        print("Trade Sent!")
    elseif not trade_status and LocalPlayer.PlayerGui.TradeApp.Frame.Visible then
        local counter = 0
        while #pets_unique_ids > 0 and counter < 18 do
            local first_removed_unique = table.remove(pets_unique_ids, 1)
            add_items_in_trade(first_removed_unique)
            print("Added Pet To Trade!")
            counter = counter + 1
            task.wait(0.5)
        end
        print("Pets left in table: " .. #pets_unique_ids)
        trade_status = true
    elseif trade_status and LocalPlayer.PlayerGui.TradeApp.Frame.Visible then
        repeat
            task.wait(1)
            first_trade_accept()
            print("Accepted!")
            task.wait(1)
            confirm_trade()
            print("Confirmed!")
        until not LocalPlayer.PlayerGui.TradeApp.Frame.Visible
    else
        print("Idle... waiting.")
    end
end

--// Run
get_pet_unique()
task.wait(5)
repeat
    print("Pets Uniques in table: " .. #pets_unique_ids)
    autotrade()
    task.wait(1)
until #pets_unique_ids == 0

while true do
    task.wait()
    first_trade_accept()
    confirm_trade()
    task.wait(5)
end

